{"version":3,"file":"wx-updata.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["export function isArray(tar) {\n    return Array.isArray(tar)\n}\n\nexport function isObject(tar) {\n    return (typeof tar === 'object') && (tar !== null) && !isArray(tar)\n}\n","import { isObject, isArray } from './utils'\n\n/**\n * 处理数组\n * @param value 当前值\n * @param curPath 当前路径\n * @param store 结果\n */\nconst handleArray = (value, curPath, store) => {\n    value.forEach((item, idx) => {        // forEach 会跳过数组空位\n        if (item !== Empty) {\n            const arrPath = `${ curPath }[${ idx }]`  // 拼接数组路径\n            if (isObject(item)) {\n                objToPath(item, arrPath + '.', store)\n            } else if (isArray(item)) {\n                handleArray(item, arrPath, store)\n            } else {\n                store[arrPath] = item\n            }\n        }\n    })\n}\n\n// 可以使用 Symbol 跳过数组项\nexport const Empty = Symbol('updata empty array item')\n\n/**\n * 对象转化为路径格式对象\n * @param obj 要转化的对象\n * @param prefix 路径前缀\n * @param store 结果\n */\nexport const objToPath = (obj,\n                          prefix = '',\n                          store = {}) => {\n    for (const [key, value] of Object.entries(obj)) {\n        const curPath = prefix === ''  // 当前路径\n          ? key\n          : prefix.endsWith('].')\n            ? `${ prefix }${ key }`\n            : `${ prefix }.${ key }`\n\n        if (isObject(value)) {                    // 是对象\n            objToPath(value, curPath, store)\n        } else if (isArray(value)) {              // 是数组\n            handleArray(value, curPath, store)\n        } else {\n            store[curPath] = value\n        }\n    }\n    return store\n}\n\n/**\n * 将函数挂载到 page 实例上\n * @param Page\n * @returns {function(any=): any}\n * @param conf\n */\nexport const updataInit = (Page, conf) => {\n    const originalPage = Page\n    return function(config) {\n        config.upData = function(data, func) {\n            if (conf.debug) {\n                console.log('转化后效果:', objToPath(data))\n            }\n            return this.setData(objToPath(data), func)\n        }\n        return originalPage(config)\n    }\n}\n"],"names":["isArray","tar","Array","isObject","_typeof","handleArray","value","curPath","store","forEach","item","idx","Empty","arrPath","objToPath","Symbol","obj","prefix","Object","entries","key","endsWith","updataInit","Page","conf","originalPage","config","upData","data","func","debug","console","log","this","setData"],"mappings":"4qCAAO,SAASA,EAAQC,UACbC,MAAMF,QAAQC,GAGlB,SAASE,EAASF,SACE,WAAfG,EAAOH,IAA8B,OAARA,IAAkBD,EAAQC,GCGnE,IAAMI,EAAc,SAAdA,EAAeC,EAAOC,EAASC,GACjCF,EAAMG,SAAQ,SAACC,EAAMC,MACbD,IAASE,EAAO,KACVC,YAAcN,cAAaI,OAC7BR,EAASO,GACTI,EAAUJ,EAAMG,EAAU,IAAKL,GACxBR,EAAQU,GACfL,EAAYK,EAAMG,EAASL,GAE3BA,EAAMK,GAAWH,OAOpBE,EAAQG,OAAO,2BAQfD,EAAY,SAAZA,EAAaE,WACAC,yDAAS,GACTT,yDAAQ,SACHU,OAAOC,QAAQH,kBAAM,iBAApCI,OAAKd,OACPC,EAAqB,KAAXU,EACZG,EACAH,EAAOI,SAAS,gBACVJ,UAAWG,aACXH,cAAYG,GAElBjB,EAASG,GACTQ,EAAUR,EAAOC,EAASC,GACnBR,EAAQM,GACfD,EAAYC,EAAOC,EAASC,GAE5BA,EAAMD,GAAWD,SAGlBE,GASEc,EAAa,SAACC,EAAMC,OACvBC,EAAeF,SACd,SAASG,UACZA,EAAOC,OAAS,SAASC,EAAMC,UACvBL,EAAKM,OACLC,QAAQC,IAAI,SAAUlB,EAAUc,IAE7BK,KAAKC,QAAQpB,EAAUc,GAAOC,IAElCJ,EAAaC"}